/*******************************************************************************
 * The John Operating System Project is the collection of software and configurations
 * to generate IoT EcoSystem, like the John Operating System Platform one.
 * Copyright (C) 2021 Roberto Pompermaier
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 ******************************************************************************/

/**
 * Gradle project's main config file for JOD Distribution TEMPLATE.
 *
 * {@see docs/gradle/gradle.md}
 * {@see docs/gradle/buildTMPL.md}
 * {@see docs/gradle/publishTMPL.md}
 */

// ---------------
// Project configs
// ---------------

group = 'com.robypomper.josp'

ext {
    set('version.deps.josp.jod.template', '1.0.3')                // Update also any *.sh file's Version fields and src/tmpls/docs/README.txt file
}

def getAssembleDir(String subDir) {
    if (!subDir.startsWith('/')) throw new IllegalArgumentException()

    def version = project.ext.get('version.deps.josp.jod.template')
    return layout.buildDirectory.dir("assemble/$version" + subDir)
}

// -------------------------------
// Clean JOD Distribution TEMPLATE
// -------------------------------

task cleanAssemble(type: Delete) {
    delete getAssembleDir("/")
}


// -------------------------------
// Build JOD Distribution TEMPLATE
// -------------------------------

task assembleTMPLShellUtilsScripts(type: Copy) {
    from 'src/shell/bash'
    from 'src/shell/ps'
    into getAssembleDir("/scripts/libs")

    mustRunAfter cleanAssemble
}

task assembleTMPLScripts(type: Copy) {
    from 'src/tmpl/bash'
    from 'src/tmpl/ps'
    into getAssembleDir("/scripts")

    mustRunAfter cleanAssemble
}

task assembleTMPLConfigs(type: Copy) {
    from 'src/tmpl/configs'
    //into into getAssembleDir("/configs")
    into getAssembleDir("/configs")

    mustRunAfter cleanAssemble
}

task assembleTMPLResources(type: Copy) {
    from 'src/tmpl/resources'
    rename { filename ->
        filename.replace '_gitignore', '.gitignore'
    }

    into getAssembleDir("/")

    mustRunAfter cleanAssemble
}

// Assemble from TMPL

task assembleTMPL() {
    dependsOn assembleTMPLShellUtilsScripts, assembleTMPLScripts, assembleTMPLConfigs, assembleTMPLResources

    mustRunAfter cleanAssemble
}

task assembleTMPLDistShellUtilsScripts(type: Copy) {
    from 'src/shell/bash'
    from 'src/shell/ps'
    into getAssembleDir("/dists/scripts/scripts/libs")

    mustRunAfter cleanAssemble
}

task assembleTMPLDistsScripts(type: Copy) {
    from 'src/dists/bash'
    from 'src/dists/ps'
    into getAssembleDir("/dists/scripts")

    mustRunAfter cleanAssemble
}

task assembleTMPLDistsConfigs(type: Copy) {
    from 'src/dists/configs'
    into getAssembleDir("/dists/configs")

    mustRunAfter cleanAssemble
}

task assembleTMPLDistsResources(type: Copy) {
    from 'src/dists/resources'
    into getAssembleDir("/dists/resources")

    mustRunAfter cleanAssemble
}

task assembleTMPLDists() {
    dependsOn assembleTMPLDistShellUtilsScripts, assembleTMPLDistsScripts, assembleTMPLDistsConfigs, assembleTMPLDistsResources

    mustRunAfter cleanAssemble
}

task buildZip(type: Zip) {
    def version = project.ext.get('version.deps.josp.jod.template')

    from getAssembleDir("/")
    include '**/**'
    into "JOD_Dist_TMPL-${version}"
    archiveName "JOD_Dist_TMPL-${version}.zip"
    destinationDir file(layout.buildDirectory.dir("publications"))

    mustRunAfter assembleTMPL, assembleTMPLDists
}

task buildTar(type: Tar) {
    def version = project.ext.get('version.deps.josp.jod.template')

    from getAssembleDir("/")
    include '**/**'
    into "JOD_Dist_TMPL-${version}"
    archiveName "JOD_Dist_TMPL-${version}.tgz"
    destinationDir file(layout.buildDirectory.dir("publications"))
    compression = Compression.GZIP

    mustRunAfter assembleTMPL, assembleTMPLDists
    doFirst {
        eachFile { println it }
    }
}

task buildTMPL() {
    group "jodTemplate"
    dependsOn cleanAssemble
    dependsOn assembleTMPL, assembleTMPLDists
    dependsOn buildZip, buildTar
}


// -------------------------------
// Build JOD Distribution TEMPLATE
// -------------------------------

task publishTMPL() {
    group "jodTemplate"
    doFirst {
        println "####################"
        println "# MANUAL OPERATION #"
        println "####################"
        println "1. Build JOD Distribution TEMPLATE"
        println "   ./gradlew buildTMPL"
        println "2. Copy results files (JOD_Dist_TMPL-{VER}.zip and JOD_Dist_TMPL-{VER}.tgz) to public repository"
        println "3. Update public repository with new version links and references"
    }
}


task clean(type: Delete) {
    delete layout.buildDirectory
}
